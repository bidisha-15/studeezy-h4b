generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  password   String
  name       String
  university String?
  createdAt  DateTime @default(now())

  materials          Material[]
  subjects           Subject[]
  chatSessions       ChatSession[]
  groupMembers       GroupMember[]
  sentGroupMessages  GroupMessage[]
  createdStudyGroups StudyGroup[]
  flashcards         Flashcard[]
  quizzes            Quiz[]
  aiStudyPlans       AiStudyPlan[]
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  materials    Material[]
  aiStudyPlans AiStudyPlan[]
}

model Tag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  color String

  materialTags MaterialTag[]
}

model Material {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  fileName      String
  fileType      String
  fileSize      Int
  fileUrl       String
  uploadedAt    DateTime @default(now())
  processedText String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId

  materialTags   MaterialTag[]
  chatSessions   ChatSession[]
  groupMaterials GroupMaterial[]
  flashcards     Flashcard[]
  quizzes        Quiz[]
  aiStudyPlans   AiStudyPlanToMaterial[]
}

model MaterialTag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  material   Material @relation(fields: [materialId], references: [id])
  materialId String   @db.ObjectId

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String @db.ObjectId
}

model ChatSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  material   Material @relation(fields: [materialId], references: [id])
  materialId String   @db.ObjectId

  messages ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  response  String
  timestamp DateTime @default(now())

  session   ChatSession @relation(fields: [sessionId], references: [id])
  sessionId String      @db.ObjectId
}

model StudyGroup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String? @db.ObjectId
  inviteCode String? @unique

  members   GroupMember[]
  materials GroupMaterial[]
  messages  GroupMessage[]
}

model GroupMember {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  role     GroupRole
  joinedAt DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  group   StudyGroup @relation(fields: [groupId], references: [id])
  groupId String     @db.ObjectId
}

enum GroupRole {
  ADMIN
  MEMBER
}

model GroupMessage {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  content String
  sentAt  DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @db.ObjectId

  group   StudyGroup @relation(fields: [groupId], references: [id])
  groupId String     @db.ObjectId
}

model GroupMaterial {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  group   StudyGroup @relation(fields: [groupId], references: [id])
  groupId String     @db.ObjectId

  material   Material @relation(fields: [materialId], references: [id])
  materialId String   @db.ObjectId
}

model Flashcard {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  material   Material? @relation(fields: [materialId], references: [id])
  materialId String?   @db.ObjectId
}

model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  material   Material? @relation(fields: [materialId], references: [id])
  materialId String?   @db.ObjectId

  questions QuizQuestion[]
}

model QuizQuestion {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  question String
  options  String[]
  answer   String

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String @db.ObjectId
}

model AiStudyPlan {
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  user      User                    @relation(fields: [userId], references: [id])
  userId    String                  @db.ObjectId
  subject   Subject                 @relation(fields: [subjectId], references: [id])
  subjectId String                  @db.ObjectId
  timeFrame String
  plan      Json
  materials AiStudyPlanToMaterial[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model AiStudyPlanToMaterial {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  aiStudyPlan   AiStudyPlan @relation(fields: [aiStudyPlanId], references: [id])
  aiStudyPlanId String      @db.ObjectId
  material      Material    @relation(fields: [materialId], references: [id])
  materialId    String      @db.ObjectId
}
